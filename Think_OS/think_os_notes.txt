### Chapter 1

- 编译语言: 程序被翻成机器语言，然后硬件执行 C
  解释语言：程序被软件解释器读取并执行 Python

- 静态类型： 编译语言，编译时发生的事
  类型固定，而且变量的名称只存在于编译时。
  动态类型： 知道运行时，才能知道变量的类型，运行时发生的时
  Python 
  >>> x = 5
  >>> print locals()
  {'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', 'x': 5, '__doc__': None, '__package__': None}
  变量名称在程序运行期间存在内存中

- 编译过程
  预处理： #include 会将其它文件的源代码插入到指令位置
  解析：编译器读取源代码，构建程序的内部表示
  静态检查：检查静态语义的错误
  代码生成：生成机器码或者字节
  链接：库
  优化
  gcc hello.c -o hello
  ./hello

- 目标代码
  gcc hello.c -c 会生成 hello.o 的文件，o 代表‘目标代码’，目标代码并不是执行代码，但是可以链接到可执行文件中
  nm Unix命令读取目标文件并生成关于它所定义和所使用的名称的信息。
  nm hello.o
 
- 汇编代码
  gcc hello.c -S 生成汇编代码

- 预处理
  gcc hello.c -E 预处理的输出

- 理解错误
  ld 是 Unix 链接器的名称，和链接关系密切

### Chapter 2

- 抽象，虚拟，隔离

- ps, init, kthreads

### Chapter 3

- 


