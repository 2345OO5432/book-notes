- OOP

// object.h

#ifndef _object_h
#define _object_h

typedef enum {
  NORTH, SOUTH, EAST, WEST
} Direction;

typedef struct {
  char *description;
  int (*init)(void *self);
  void (*describe)(void *self);
  void (*destroy)(void *self);
  void *(*move)(void *self, Direction direction);
  int (*attack)(void *self, int damage);
} Object;

int Object_init(void *self);
void Object_destroy(void *self);
void Object_describe(void *self);
void *Object_move(void *self, Direction direction);
int Object_attack(void *self, int damage);
void *Object_new(size_t size, Object proto, char *description);

#define NEW(T, N) Object_new(sizeof(T), T##Proto, N)
#define _(N) proto.N

#endif


尝试解读：

#ifndef _object_h
#define _object_h
#endif

防止多饮用的

#define NEW(T, N) Object_new(sizeof(T), T##Proto, N)
模板函数：  左边会展开为右边， T##Proto 会被写成比如 NEW(ROOM, "Hello") 会变成 RoomProto
准确来说展开为： NEW(Room, "Hello")  Object_new(sizeof(Room), RoomProto, "Hello")

关于##： Token-Pasting Operator (##) : https://msdn.microsoft.com/en-us/library/09dwwt6y.aspx

#define _(N) proto.N 会变成 obj->(proto.blah) 变成 obj->_(blah)


定义了一个struct，里面包含了 description 这个字符串，还有一堆函数指针。
比如 int (*init)(void *self)

这个 void *self 是一个 void pointer.

“This is a function that takes a void pointer - a pointer without a specific type. Void pointer type lets you pass a pointer to any data type to a function that is declared like that. The function will have to cast the pointer to an appropriate type before reading/writing the data from it, or pass the pointer on to other functions that take void*.”

https://stackoverflow.com/questions/12845082/c-funcnamevoid-self

可以看到之后的object.c中：

// object.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "object.h"
#include <assert.h>


void Object_destroy(void *self) {
  Object *obj = self;

  if (obj) {
    if (obj->description) free(obj->description);
    free(obj);
  }
}

void Object_describe(void *self) {
  Object *obj = self;
  printf("%s.\n",obj->description );
}


int Object_init(void *self){
  // do really nothing
  return 1;
}

void *Object_move(void *self, Direction direction){
  printf("You can't go that direction\n" );
  return NULL;
}

int Object_attack(void *self, int damage){
  printf("You can't attack that\n" );
  return 0;
}

void *Object_new(size_t size, Object proto, char *description){
  // set up the default functions in case they aren't set
  if (!proto.init) proto.init = Object_init;
  if (!proto.describe) proto.describe = Object_describe;
  if (!proto.destroy) proto.destroy = Object_destroy;
  if (!proto.attack) proto.attack = Object_attack;
  if (!proto.move) proto.move = Object_move;

  // this seems werid, but we can make a struct of one size.
  // then point a diffrent pointer at it to 'cast' it
  Object *e1 = calloc(1, size);
  *e1 = proto;

  //copy the description over
  e1->description = strdup(description);

  // initialize it with whatever init we were given
  if (!e1->init(e1)) {
    // looks like it didn't initialize properly
    e1->destroy(e1);
    return NULL;
  } else {
    // all done, we made an object of any type.
    return e1;
  }

}

这些都是样本函数，相当于给之前的prototype填上。

这之中最重要的是 void *Object_new(size_t size, Object proto, char *description)

这个Object_new函数 take in 一个size， 一个 Object proto，这里的proto是prototype的缩小， 一个 description
返回一个 void * 指针


前半部分来看，如果Object原型没有定义这些‘原型函数’，那么我们就使用默认的模板。
将object这个结构体中包含的函数指针给定义。

同时这也是后面的 monster->_(description) make sense的地方：

monster->_(description)  根据最上面的 #define _(N) proto.N 翻译一下应该是： monster->proto.description
改成这个有效|||

否则我们使用proto 定义的。

然后看这两句：

  // this seems werid, but we can make a struct of one size.
  // then point a diffrent pointer at it to 'cast' it
  Object *e1 = calloc(1, size);
  *e1 = proto;


"The calloc() function contiguously allocates enough space for count
objects that are size bytes of memory each and returns a pointer to the
allocated memory.  The allocated memory is filled with bytes of value
zero."

先获取指针，然后让它的指向cast成proto.

然后初始化 e1 的 description，最后返回的指针是e1, e1 指向的是 proto.
     

同时需要修改MakeFile文件，告诉ex19所需要的支持：

CFLAGS=-Wall -g

all: ex19

ex19: object.o

运行ex19时候，需要构建object.o ，虽然此时没有object.o但是make会找到object.c来make它


// ex19.h

#ifndef _ex19_h
#define _ex19_h

#include "object.h"

struct Monster {
  Object proto;
  int hit_points;
};

typedef struct Monster Monster;

int Monster_attack(void *self, int damage);
int Monster_init(void *self);

struct Room{
  Object proto;

  Monster *bad_guy;

  struct Room *north;
  struct Room *south;
  struct Room *east;
  struct Room *west;
};

typedef struct Room Room;

void *Room_move(void *self, Direction direction);
int Room_attack(void *self, int damage);
int Room_init(void *self);

struct Map{
  Object proto;
  Room *start;
  Room *location;
};

typedef struct Map Map;

void *Map_move(void *self, Direction direction);
int Map_attack(void *self, int damage);
int Map_init(void *self);

#endif


新定义了三个‘对象’： Map， Monster， Room


可以看出来我们的每个新‘对象’都包含有Object proto这个‘原型’
甚至 Room也是一个类似linked list的结构，中间有自己指向自己的指针
Map 有proto， Room start 和 location的指针


quote:

- 我调用了NEW(Room, "Hello.")，C预处理器会将其展开为Object_new(sizeof(Room), RoomProto, "Hello.")。
- 执行过程中，在Object_new的内部我分配了Room大小的一块内存，但是用Object *el来指向它。
- 由于C将Room.proto字段放在开头，这意味着el指针实际上指向了能访问到完整Object结构体的，足够大小的一块内存。它不知道这块内存叫做proto。
- 接下来它使用Object *el指针，通过*el =    proto来设置这块内存的内容。要记住你可以复制结构体，而且*el的意思是“el所指向对象的值”，所以整条语句意思是“将el所指向对象的值赋为proto”。
- 由于这个谜之结构体被填充为来自proto的正确数据，这个函数接下来可以在Object上调用init，或者destroy。但是最神奇的一部分是无论谁调用这个函数都可以将它们改为想要的东西。

这就是object的神奇之处，它相当于变成了一个模板，谁都可以调用它来生成‘object’.


// ex19.c

#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "ex19.h"


int Monster_attack(void *self, int damage){
  Monster *monster = self;
  printf("You attack %s!\n",monster->_(description));

  monster->hit_points -= damage;

  if (monster->hit_points > 0) {
    printf("It is still alive\n");
    return 0;
  } else {
    printf("It is dead\n");
    return 1;
  }
}


int Monster_init(void *self){
  Monster *monster = self;
  monster->hit_points = 10;
  return 1;
}

Object MonsterProto = {
  .init = Monster_init,
  .attack = Monster_attack
};


void *Room_move(void *self, Direction direction){
  Room *room = self;
  Room *next = NULL;

  if (direction == NORTH && room->north) {
    printf("You go to north, into:\n" );
    next = room->north;
  } else if (direction == SOUTH && room->south) {
    printf("You go to south, into:\n");
    next = room->south;
  } else if (direction == EAST && room->east) {
    printf("You go to east, into:\n" );
    next = room->east;
  } else if (direction == WEST && room->west) {
    printf("You go to west, into:\n" );
    next = room->west;
  } else {
    printf("You can't go that direction\n");
    next = NULL;
  }

  if (next) {
    next->_(describe)(next);
  }

  return next;
}

int Room_attack(void *self, int damage){
  Room *room = self;
  Monster *monster = room->bad_guy;

  if (monster) {
    monster->_(attack)(monster,damage);
    return 1;
  } else {
    printf("You fail in the air at nothing. Idiot.\n" );
    return 0;
  }
}

Object RoomProto = {
  .move = Room_move,
  .attack = Room_attack
};

void *Map_move(void *self, Direction direction){
  Map *map = self;
  Room *location = map->location;
  Room *next = NULL;

  next = location->_(move)(location, direction);

  if (next) {
    map->location = next;
  }

  return next;
}

int Map_attack(void *self, int damage){
  Map *map = self;
  Room *location = map->location;

  return location->_(attack)(location, damage);
}

int Map_init(void *self){
    Map *map = self;

    // make some rooms for a small map.
    Room *hall = NEW(Room, "The great Hall");
    Room *throne = NEW(Room, "The throne room");
    Room *arena = NEW(Room, "The arena, without the minotaur");
    Room *kitchen = NEW(Room, "Kitchen, you have the knife now");

    // put the bad guy in the arena
    arena->bad_guy = NEW(Monster, "The evil minotaur");

    // setup the map rooms
    hall->north = throne;

    throne->west = arena;
    throne->east = kitchen;
    throne->south = hall;

    arena->east = throne;
    kitchen->west = throne;

    // start the map and the character off in the hall
    map->start = hall;
    map->location = hall;

    return 1;
}

Object MapProto = {
  .init = Map_init,
  .move = Map_move,
  .attack = Map_attack
};

int process_input(Map *game){
  printf("\n> ");

  char ch = getchar();
  getchar(); // eat Enter

  int damage = rand() % 4;

  switch (ch) {
    case -1:
      printf("Giving up? You suck\n");
      return 0;
      break;

    case 'n':
      game->_(move)(game, NORTH);
      break;

    case 's':
      game->_(move)(game, SOUTH);
      break;

    case 'e':
      game->_(move)(game, EAST);
      break;

    case 'w':
      game->_(move)(game, WEST);
      break;

    case 'a':
      game->_(attack)(game, damage);
      break;


    case 'l':
      printf("You can go :\n" );
      if (game->location->north) printf("NORTH\n");
      if (game->location->south) printf("SOUTH\n");
      if (game->location->east) printf("EAST\n");
      if (game->location->west) printf("WEST\n");
      break;

    default:
      printf("what? : %d\n",ch );
  }

  return 1;
}

int main(int argc, char const *argv[]) {
  // simple way to setup randomnewss
  srand(time(NULL));

  // make our map to work with
  Map *game = NEW(Map, "The Hall of the Minotaur.");

  printf("You enter the ");
  game->location->_(describe)(game->location);

  while (process_input(game)) {
  }

  return 0;
}



先看一些语法糖的部分：

monster->_(description) 相当于： monster->Monsterproto.description (?)

因为 monster 这个结构体是： 

struct Monster {
  Object proto;
  int hit_points;
};

所以对于hit_points,我们可以直接 monster->hit_points


Object MonsterProto = {
  .init = Monster_init,
  .attack = Monster_attack
};

针对MonsterProto，因为其实所有函数都是默认写好在 Object_new 中，我们可以修改其中的一些函数。




