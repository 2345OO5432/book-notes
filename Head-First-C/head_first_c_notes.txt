### Chapter 1 

- echo $? 检查C程序的退出状态

- 编译型语言 C  vs 解释型语言 Python

- 编译器 GNU Compiler Collection :  gcc 

- compile & run : 
  gcc file.c -o file 
  ./file
 
- compile & run together:
  gcc file.c -o file && ./file

- 在类Unix系统中，之所以要加 ./ 是因为运行程序必须制定其所在的目录，除非程序的目录已经列在了PATH环境变量中

- C语言不支持现成的字符串（再强调一次），以字符为元素的数组

- C语言中布尔值使用数字表示的，0表示假，任何不等于0则为真


### Chapter 2

- 指针就是存储器中某条数据的地址。指针避免副本和共享数据。

- 找出变量的存储器地址，用&运算符， printf("x保存在 %p\n", &x);

- 得到变量的地址： int *address_of_x = &x;  读取地址中的内容 int value_stored = *address_of_x; 改变地址中的内容：*address_of_x = 99; 
  &运算符：取地址， *接收地址，告诉地址中的数据，*对指针解引用。
  所谓指针变量，也就是地址变量。

- sizeof("Turtiles!") 返回 9，包含8个字符+ '\0'

- 数组变量好比指针，创建了一个数组，数组变量就可以当指针用。数组变量指向数组中第一个元素，如果把函数参数声明为数组，它会被当做指针处理。

- sizeof 是一个运算符，运算符就是一串指令；而函数会调到一段独立的代码

- 数组变量 vs 指针 
  sizeof 数组是数组的大小 char s[] = "How big is it?", sizeof(s) = 15
  char *t = s; sizeof(t) = 4 or 8.
  数组的地址是数组的地址： & s = s
  &t != t 表示的是变量t的地址
  数组变量不能指向其它地方，比如 s = t 会报编译错误。
  把数组赋值给指针，会丢失一些信息，所谓退化。

- scanf("%d", &i); scanf("%39s", name); scanf需要更新内容，所以需要使用指针取地址。
  我们需要限制scanf字符串长度，否则如果长度超过，我们会有segmentation fault 或者abort trap（这个trap是在kernal mode地方切换的trap么？）

- fgets
  char food[5];
  printf("Enter favorite food: ");
  fgets(food, sizeof(food), sstdin);  
  这里的sizeof 包括 '\0'的长度， scanf则需要长度-1
  如果food是一个指针，我们需要显式给出长度

- 修改只读字符串，出现bus error错误
  所以建议这样： const char *s = "some string";
  这样如果尝试修改报错。

- char cards[] 是一个数组，而且必须立即赋值，但是如果是函数参数 void stack_deck(char cards[]) 与 void stack_deck(char *cards) 等效

- 局部变量保存在栈上


### Chapter 2.5

- string.h  

- 数组的数组 和 指针的数组


### Chapter 3 

- 使用 < 重新定向标准输入，比如 ./geo2json < gpsdata.csv

- 使用 > 重新定向标准输出，比如 ./geo2json < gpsdata.csv > output.json

- printf("") = fprintf(stdout, "")

- ./secret_messages < secret.txt > message1.txt 2 > message2.txt 重定向标准输出 以及 2> 重定向标准错误

- pipe | 连接一个进程的标准输出与另一个进程的标准输入。例子 (./bermuda | ./geo2json) < spooky.csv > output.json

- 创建数据流，读取数据： FILE *in_file = fopen("input.txt", "r") 
  写数据 FILE *out_file = fopen("output.txt", "w");
  数据流创建完毕后，可以用fprintf往数据流中打印数据 fprintf(out_file, " xxxx ");
  用fscanf读取数据： fscanf(in_file, "%79[^\n]\n", sentence);
  关闭数据流 fclose(in_file); fclose(out_file);

- 安全检查
  FILE *in;
  if (!(in = fopen("我不存在.txt", "r"))){
    fprintf(stderr, "无法打开文件.\n");
    return 1;
  }

- ps -ae 显示所有进程，包括后台运行的进程。
  tail -f logfile.txt 持续显示文件末尾新添加的数据。

- unistd.h 不是标准库，是POSIX库

  rocket-to -e 4 -a Brasilia Tokyo London
  
  #include <unistd.h>
  
  while ((ch = getopt(argc, argv, "ae:")) != EOF) 
  switch(ch) { // 注意这里先有swtich，再有大括号
  ...
  case 'e':
   engine_count = optarg;  // 注意这里engine_count 会变成4
  ...  
  }
 
  argc -= optind;
  argv += optind;
  // 这两行作用是跳过已经读取的选项

- '--' 可以用来隔开参数和选项


### Chapter 4

- 整形 / 整形 = 舍入的整数

- limits.h 和 float.h 中能有： INT_MAX, INT_MIN, sizeof(int), FLT_MAX, FLT_MIN, sizeof(float)

- 预处理 / 编译 / 汇编 / 链接

- extern int password; 共享变量

- 多个文件编译： gcc file1.c file2.c -o file 

- 把源代码编译为目标文件 gcc -c *.c  
  把目标文件链接起来     gcc *.o -o launch
  唯一修改过的文件 gcc -c thruster.c  重新创建thruster.o文件  gcc *.o -o launch 重新链接所有目标文件

- make 工具: 依赖项 生成方法
  makefile or Makefile 
  
  launch.o: launch.c launch.h thruster.h
  	gcc -c launch.c
  thruster.o: thruster.h thruster.c
  	gcc -c thruster.c
  launch: launch.o thruster.o
   	gcc launch.o thruster.o -o launch
  生成方法是tab

- autoconf 可以生成makefile


Chapter 5

- struct

- 为结构变量赋值相当于叫计算机复制数据。在C语言中，所有赋值都会复制数据，如果想复制数据的引用，就应该赋指针。

- typedef

- (*t).age 指向乌龟的指针，  (*t).age 乌龟的年龄，注意括号，因为.会被优先计算。t->age = (*t).age

- union 
  typedef union {
    short count;
    float weight;
    float volume;
  } quantity;
  quantity q = { .weight = 1.5 };  // designated initializer
  quantity q;
  q.volume = 3.7;
  
- 枚举 enum  结构与联合用分号分割数据项，而枚举用逗号

- 位字段 bitfield 
  typedef struct {
    unsigned int low_pass_vcf: 1;
    ...
    ...
  } synth;


- Chapter 6

- 递归结构要有名字

- malloc 分配 有借有还  有 free 归还 #includ <stdlib.h>

- malloc 返回通用指针 void *

- 复制字符串 strdup 
  char *s = "Mona Lisa";
  char *copy = strdup(s);
  需要free

- valgrind --leak-check=full ./file
 
  
### Chapter 7

- 函数名是指向函数的指针

- 函数指针
  int (*warp_fn)(int);
  warp_fn = go_to_warp_speed;
  warp_fn(4);

  char** (*names_fn)(char *, int);
  names_fn = album_names;
  char** results = name_fn("Sacha Distel", 1972);
  调用的时候可以加也可以不加括号 比如match(AD[i]) 或者 (*match)(AD[i])
  也可以这样写：find(sports_or_workout) 或 find(&sports_or_workout)
  
- 函数指针
  返回类型 (*指针变量)(参数类型)

- qsort(void *array, size_t length, size_t item_size, int (*compar)(const void *, const void *));
  
  int scores[] = {543, 323, 32, 554, 11, 3, 112};
  qsort(scores, 7, sizeof(int) compare_scores);
  int compare_scores(const void *score_a, const void *score_b) {
    int a = *(int *)score_a;
    int b = *(int *)score_b;
    return a - b;
  }
  
  因为comapr传入的是指针，有些状况下，我们应当留下指针，更方便计算，void * 指针可以被转换成别的任何方便的指针

- 比较字符串
  int compare_names(const void* a, const void* b)
  {
    char** sa = (char **)a;
    // 字符串是字符指针，所以得到的是指针的指针。
    char** sb = (char **)b;
    return strcmp(*sa, *sb);
    // 运用*运算符取得字符串
  }
  字串符数组中的每一项都是字符指针（char *),当qsort调用比较器函数时，会发送两个指向数组元素的指针，也就是说比较器函数接收到的是指向字符指针的指针，在C语言中就是char **。

- 函数指针数组
  下方的response是我们定义的一个例子
  void (*replies[]) (response) =  {dump, second_chance, marriage};
  返回类型 (*指针变量）(参数类型)
  例子： (replies[r[i].type])(r[i]);

- 如果有函数 shoot() ,那么 shoot 和 &shoot 都指向 shoot() 函数
  如果 fp 是函数指针，那么可以用 fp(参数，.....) 调用函数， 也可以用 (*fp)(参数, .....) 调用
  qsort 接收指向比较器函数的指针，比较器函数接收两个指针，分别指向待排序数组中的两项

- 可变参数函数(variadic function) 
  #include <stdarg.h>
  // 需要include standard arguments
  // stdarg.h

  void print_ints(int args,...)
  // 必须要有一个普通参数，一般说来是告知可变参数的个数
  {
    va_list ap;
    // 创建 va_list 保存传给函数的其它参数
    va_start(ap, args);
    // 说明可变参数从args开始
    int i;
    for( i = 0; i < args; i++) {
      printf("argument: %i\n", va_arg(ap, int));
      // 用va_arg读取 va_list 和 要读取参数的类型，这个例子中全是int 
    }
    va_end(ap);
    // 销毁va_list
  }
  print_ints(3, 79, 101, 32); 
  // 调用函数

- 

