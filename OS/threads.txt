- threads

每个 thread 都有自己的 regs, stack pointer, 但是它们共享 code/data/files， 存在同一个process PCB中

一个process可以有多个threads

对于多个CPU: 

parallelization => speed up

specialization => hot cache

efficiency => lower mm requirement & cheap IPC


单个CPU:

if (t_idle) > 2 * (t_ctx_switch) 
context switch 对 threads 时间更短


- mutex / waiting : threads之间共享数据

- Thread: thread ID, PC, SP, registers, stack, attributes
  fork(proc, args) create a thread, this is not a Unix fork
  join(thread) terminate a thread, of course if the thread is still running, it will run on CPU and block other threads first
  
  
- Mutexes 

Mutex 锁， 当 access data shared thread, exclusive access.

locked / owner / blocked_threads

Lock (mutex) {
  critical 
  section
}


Burrell's Lock API:

Lock(m){
  // critical section
} // unlock;



Common Thread API

lock(m);

// critical section

unlock(m);


例子：

list<int> my_list;
Mutex m;
void safe_insert(int i) {
  Lock(m){
    my_list.insert(i);
  } // unlock;
}

- Producer / Consumer Example


// main
for i = 0...10
  producers[i] = fork(safe_insert, NULL) // create producers
consumer = fork(print_and_clear, my_list) // create consumer

// producers: safe_insert
Lock(m){
  list->insert(my_thread_id)
} //unlock;

// consumer: print_and_clear
Lock(m) {
  if my_list.full -> print; clear up to limit of elements of list
  else -> release lock and try again (later)
} //unlock;


Wasterful


- Condition Variable

// consumer: print_and_clear
Lock(m){
  while(my_list.not_full())
Wait(m, list_full);
  my_list.print_and_remove_all();
} // unlock

// producers: safe_insert
Lock(m){
  my_list.insert(my_thread_id);
  if my_list.full()
    Signal(list_full);
} // unlock;